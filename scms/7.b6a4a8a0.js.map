{"version":3,"sources":["webpack:///../node_modules/_localforage@1.7.2@localforage/dist/localforage.js"],"names":["require","module","exports","e","t","n","r","s","o","u","a","i","f","Error","code","l","call","length","1","_dereq_","global","scheduleDrain","draining","Mutation","MutationObserver","WebKitMutationObserver","called","observer","nextTick","element","document","createTextNode","observe","characterData","data","setImmediate","MessageChannel","createElement","scriptEl","onreadystatechange","parentNode","removeChild","documentElement","appendChild","setTimeout","channel","port1","onmessage","port2","postMessage","queue","oldQueue","len","task","push","this","self","window","2","immediate","INTERNAL","handlers","REJECTED","FULFILLED","PENDING","Promise","resolver","TypeError","state","outcome","safelyResolveThenable","QueueItem","promise","onFulfilled","onRejected","callFulfilled","otherCallFulfilled","callRejected","otherCallRejected","unwrap","func","value","returnValue","reject","resolve","getThen","obj","then","apply","arguments","thenable","onError","onSuccess","result","tryCatch","status","out","prototype","constructor","error","reason","all","iterable","Object","toString","values","Array","resolved","allResolver","outValue","race","response","3","4","_typeof","Symbol","iterator","idb","indexedDB","webkitIndexedDB","mozIndexedDB","OIndexedDB","msIndexedDB","getIDB","createBlob","parts","properties","Blob","name","Builder","BlobBuilder","MSBlobBuilder","MozBlobBuilder","WebKitBlobBuilder","builder","append","getBlob","type","Promise$1","executeCallback","callback","executeTwoCallbacks","errorCallback","normalizeKey","key","console","warn","String","getCallback","DETECT_BLOB_SUPPORT_STORE","supportsBlobs","dbContexts","READ_ONLY","READ_WRITE","_checkBlobSupport","txn","transaction","blob","objectStore","put","onabort","preventDefault","stopPropagation","oncomplete","matchedChrome","navigator","userAgent","match","matchedEdge","parseInt","_checkBlobSupportWithoutCaching","_deferReadiness","dbInfo","dbContext","deferredOperation","deferredOperations","dbReady","_advanceReadiness","pop","_rejectReadiness","err","_getConnection","upgradeNeeded","forages","db","close","dbArgs","version","openreq","open","onupgradeneeded","createObjectStore","storeName","oldVersion","ex","newVersion","onerror","onsuccess","_getOriginalConnection","_getUpgradedConnection","_isUpgradeNeeded","defaultVersion","isNewStore","objectStoreNames","contains","isDowngrade","isUpgrade","incVersion","_decodeBlob","encodedBlob","arrayBuff","bin","buf","ArrayBuffer","arr","Uint8Array","charCodeAt","_binStringToArrayBuffer","atob","_isEncodedBlob","__local_forage_encoded_blob","_fullyReady","_initReady","_dbInfo","createTransaction","mode","retries","undefined","tx","forage","_tryReconnect","asyncStorage","_driver","_initStorage","options","ready","initPromises","ignoreErrors","j","slice","_defaultConfig","k","_support","isSafari","openDatabase","test","platform","hasFetch","fetch","indexOf","IDBKeyRange","isIndexedDBValid","iterate","store","req","openCursor","iterationNumber","cursor","getItem","get","setItem","blobSupport","reader","FileReader","onloadend","base64","btoa","target","readAsBinaryString","_encodeBlob","removeItem","clear","count","advanced","advance","keys","dropInstance","currentConfig","config","isCurrentDb","dbPromise","dropObjectPromise","deleteObjectStore","_forage2","dropDBPromise","deleteDatabase","onblocked","_forage","BASE_CHARS","BLOB_TYPE_PREFIX","BLOB_TYPE_PREFIX_REGEX","SERIALIZED_MARKER","SERIALIZED_MARKER_LENGTH","TYPE_ARRAYBUFFER","TYPE_BLOB","TYPE_INT8ARRAY","TYPE_UINT8ARRAY","TYPE_UINT8CLAMPEDARRAY","TYPE_INT16ARRAY","TYPE_INT32ARRAY","TYPE_UINT16ARRAY","TYPE_UINT32ARRAY","TYPE_FLOAT32ARRAY","TYPE_FLOAT64ARRAY","TYPE_SERIALIZED_MARKER_LENGTH","toString$1","stringToBuffer","serializedString","encoded1","encoded2","encoded3","encoded4","bufferLength","p","buffer","bytes","bufferToString","base64String","substring","localforageSerializer","serialize","valueType","marker","fileReader","onload","str","readAsArrayBuffer","JSON","stringify","deserialize","parse","blobType","matcher","Int8Array","Uint8ClampedArray","Int16Array","Uint16Array","Int32Array","Uint32Array","Float32Array","Float64Array","createDbTable","executeSql","tryExecuteSql","sqlStatement","args","SYNTAX_ERR","results","rows","webSQLStorage","dbInfoPromise","description","size","serializer","item","_setItem","retriesLeft","originalValue","sqlError","QUOTA_ERR","c","storeNames","getAllStoreNames","operationInfo","dropTable","operations","_getKeyPrefix","defaultConfig","keyPrefix","_isLocalStorageUsable","localStorage","checkIfLocalStorageThrows","localStorageWrapper","isLocalStorageValid","keyPrefixLength","itemKey","sameValue","x","y","isNaN","includes","array","searchElement","isArray","arg","DefinedDrivers","DriverSupport","DefaultDrivers","INDEXEDDB","WEBSQL","LOCALSTORAGE","DefaultDriverOrder","OptionalDriverMethods","LibraryMethods","concat","DefaultConfig","driver","callWhenReady","localForageInstance","libraryMethod","_args","extend","_key","hasOwnProperty","LocalForage","driverTypeKey","instance","Constructor","_classCallCheck","driverName","defineDriver","_config","_driverSet","_initDriver","_ready","_wrapLibraryMethodsWithReady","setDriver","replace","driverObject","complianceError","driverMethods","driverMethodName","isRequired","methodNotImplementedFactory","methodName","_i","_len","optionalDriverMethod","configureMissingMethods","setDriverSupport","support","info","getDriver","getDriverPromise","getSerializer","serializerPromise","drivers","supportedDrivers","_getSupportedDrivers","setDriverToConfig","extendSelfWithDriver","_extend","oldDriverSetDone","currentDriverIndex","driverPromiseLoop","initDriver","supports","libraryMethodsAndProperties","createInstance","localforage_js"],"mappings":"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","file":"7.b6a4a8a0.js","sourcesContent":["/*!\n    localForage -- Offline Storage, Improved\n    Version 1.7.2\n    https://localforage.github.io/localForage\n    (c) 2013-2017 Mozilla, Apache License 2.0\n*/\n(function(f){if(typeof exports===\"object\"&&typeof module!==\"undefined\"){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define([],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}g.localforage = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw (f.code=\"MODULE_NOT_FOUND\", f)}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(_dereq_,module,exports){\n(function (global){\n'use strict';\nvar Mutation = global.MutationObserver || global.WebKitMutationObserver;\n\nvar scheduleDrain;\n\n{\n  if (Mutation) {\n    var called = 0;\n    var observer = new Mutation(nextTick);\n    var element = global.document.createTextNode('');\n    observer.observe(element, {\n      characterData: true\n    });\n    scheduleDrain = function () {\n      element.data = (called = ++called % 2);\n    };\n  } else if (!global.setImmediate && typeof global.MessageChannel !== 'undefined') {\n    var channel = new global.MessageChannel();\n    channel.port1.onmessage = nextTick;\n    scheduleDrain = function () {\n      channel.port2.postMessage(0);\n    };\n  } else if ('document' in global && 'onreadystatechange' in global.document.createElement('script')) {\n    scheduleDrain = function () {\n\n      // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted\n      // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.\n      var scriptEl = global.document.createElement('script');\n      scriptEl.onreadystatechange = function () {\n        nextTick();\n\n        scriptEl.onreadystatechange = null;\n        scriptEl.parentNode.removeChild(scriptEl);\n        scriptEl = null;\n      };\n      global.document.documentElement.appendChild(scriptEl);\n    };\n  } else {\n    scheduleDrain = function () {\n      setTimeout(nextTick, 0);\n    };\n  }\n}\n\nvar draining;\nvar queue = [];\n//named nextTick for less confusing stack traces\nfunction nextTick() {\n  draining = true;\n  var i, oldQueue;\n  var len = queue.length;\n  while (len) {\n    oldQueue = queue;\n    queue = [];\n    i = -1;\n    while (++i < len) {\n      oldQueue[i]();\n    }\n    len = queue.length;\n  }\n  draining = false;\n}\n\nmodule.exports = immediate;\nfunction immediate(task) {\n  if (queue.push(task) === 1 && !draining) {\n    scheduleDrain();\n  }\n}\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{}],2:[function(_dereq_,module,exports){\n'use strict';\nvar immediate = _dereq_(1);\n\n/* istanbul ignore next */\nfunction INTERNAL() {}\n\nvar handlers = {};\n\nvar REJECTED = ['REJECTED'];\nvar FULFILLED = ['FULFILLED'];\nvar PENDING = ['PENDING'];\n\nmodule.exports = Promise;\n\nfunction Promise(resolver) {\n  if (typeof resolver !== 'function') {\n    throw new TypeError('resolver must be a function');\n  }\n  this.state = PENDING;\n  this.queue = [];\n  this.outcome = void 0;\n  if (resolver !== INTERNAL) {\n    safelyResolveThenable(this, resolver);\n  }\n}\n\nPromise.prototype[\"catch\"] = function (onRejected) {\n  return this.then(null, onRejected);\n};\nPromise.prototype.then = function (onFulfilled, onRejected) {\n  if (typeof onFulfilled !== 'function' && this.state === FULFILLED ||\n    typeof onRejected !== 'function' && this.state === REJECTED) {\n    return this;\n  }\n  var promise = new this.constructor(INTERNAL);\n  if (this.state !== PENDING) {\n    var resolver = this.state === FULFILLED ? onFulfilled : onRejected;\n    unwrap(promise, resolver, this.outcome);\n  } else {\n    this.queue.push(new QueueItem(promise, onFulfilled, onRejected));\n  }\n\n  return promise;\n};\nfunction QueueItem(promise, onFulfilled, onRejected) {\n  this.promise = promise;\n  if (typeof onFulfilled === 'function') {\n    this.onFulfilled = onFulfilled;\n    this.callFulfilled = this.otherCallFulfilled;\n  }\n  if (typeof onRejected === 'function') {\n    this.onRejected = onRejected;\n    this.callRejected = this.otherCallRejected;\n  }\n}\nQueueItem.prototype.callFulfilled = function (value) {\n  handlers.resolve(this.promise, value);\n};\nQueueItem.prototype.otherCallFulfilled = function (value) {\n  unwrap(this.promise, this.onFulfilled, value);\n};\nQueueItem.prototype.callRejected = function (value) {\n  handlers.reject(this.promise, value);\n};\nQueueItem.prototype.otherCallRejected = function (value) {\n  unwrap(this.promise, this.onRejected, value);\n};\n\nfunction unwrap(promise, func, value) {\n  immediate(function () {\n    var returnValue;\n    try {\n      returnValue = func(value);\n    } catch (e) {\n      return handlers.reject(promise, e);\n    }\n    if (returnValue === promise) {\n      handlers.reject(promise, new TypeError('Cannot resolve promise with itself'));\n    } else {\n      handlers.resolve(promise, returnValue);\n    }\n  });\n}\n\nhandlers.resolve = function (self, value) {\n  var result = tryCatch(getThen, value);\n  if (result.status === 'error') {\n    return handlers.reject(self, result.value);\n  }\n  var thenable = result.value;\n\n  if (thenable) {\n    safelyResolveThenable(self, thenable);\n  } else {\n    self.state = FULFILLED;\n    self.outcome = value;\n    var i = -1;\n    var len = self.queue.length;\n    while (++i < len) {\n      self.queue[i].callFulfilled(value);\n    }\n  }\n  return self;\n};\nhandlers.reject = function (self, error) {\n  self.state = REJECTED;\n  self.outcome = error;\n  var i = -1;\n  var len = self.queue.length;\n  while (++i < len) {\n    self.queue[i].callRejected(error);\n  }\n  return self;\n};\n\nfunction getThen(obj) {\n  // Make sure we only access the accessor once as required by the spec\n  var then = obj && obj.then;\n  if (obj && (typeof obj === 'object' || typeof obj === 'function') && typeof then === 'function') {\n    return function appyThen() {\n      then.apply(obj, arguments);\n    };\n  }\n}\n\nfunction safelyResolveThenable(self, thenable) {\n  // Either fulfill, reject or reject with error\n  var called = false;\n  function onError(value) {\n    if (called) {\n      return;\n    }\n    called = true;\n    handlers.reject(self, value);\n  }\n\n  function onSuccess(value) {\n    if (called) {\n      return;\n    }\n    called = true;\n    handlers.resolve(self, value);\n  }\n\n  function tryToUnwrap() {\n    thenable(onSuccess, onError);\n  }\n\n  var result = tryCatch(tryToUnwrap);\n  if (result.status === 'error') {\n    onError(result.value);\n  }\n}\n\nfunction tryCatch(func, value) {\n  var out = {};\n  try {\n    out.value = func(value);\n    out.status = 'success';\n  } catch (e) {\n    out.status = 'error';\n    out.value = e;\n  }\n  return out;\n}\n\nPromise.resolve = resolve;\nfunction resolve(value) {\n  if (value instanceof this) {\n    return value;\n  }\n  return handlers.resolve(new this(INTERNAL), value);\n}\n\nPromise.reject = reject;\nfunction reject(reason) {\n  var promise = new this(INTERNAL);\n  return handlers.reject(promise, reason);\n}\n\nPromise.all = all;\nfunction all(iterable) {\n  var self = this;\n  if (Object.prototype.toString.call(iterable) !== '[object Array]') {\n    return this.reject(new TypeError('must be an array'));\n  }\n\n  var len = iterable.length;\n  var called = false;\n  if (!len) {\n    return this.resolve([]);\n  }\n\n  var values = new Array(len);\n  var resolved = 0;\n  var i = -1;\n  var promise = new this(INTERNAL);\n\n  while (++i < len) {\n    allResolver(iterable[i], i);\n  }\n  return promise;\n  function allResolver(value, i) {\n    self.resolve(value).then(resolveFromAll, function (error) {\n      if (!called) {\n        called = true;\n        handlers.reject(promise, error);\n      }\n    });\n    function resolveFromAll(outValue) {\n      values[i] = outValue;\n      if (++resolved === len && !called) {\n        called = true;\n        handlers.resolve(promise, values);\n      }\n    }\n  }\n}\n\nPromise.race = race;\nfunction race(iterable) {\n  var self = this;\n  if (Object.prototype.toString.call(iterable) !== '[object Array]') {\n    return this.reject(new TypeError('must be an array'));\n  }\n\n  var len = iterable.length;\n  var called = false;\n  if (!len) {\n    return this.resolve([]);\n  }\n\n  var i = -1;\n  var promise = new this(INTERNAL);\n\n  while (++i < len) {\n    resolver(iterable[i]);\n  }\n  return promise;\n  function resolver(value) {\n    self.resolve(value).then(function (response) {\n      if (!called) {\n        called = true;\n        handlers.resolve(promise, response);\n      }\n    }, function (error) {\n      if (!called) {\n        called = true;\n        handlers.reject(promise, error);\n      }\n    });\n  }\n}\n\n},{\"1\":1}],3:[function(_dereq_,module,exports){\n(function (global){\n'use strict';\nif (typeof global.Promise !== 'function') {\n  global.Promise = _dereq_(2);\n}\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{\"2\":2}],4:[function(_dereq_,module,exports){\n'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction getIDB() {\n    /* global indexedDB,webkitIndexedDB,mozIndexedDB,OIndexedDB,msIndexedDB */\n    try {\n        if (typeof indexedDB !== 'undefined') {\n            return indexedDB;\n        }\n        if (typeof webkitIndexedDB !== 'undefined') {\n            return webkitIndexedDB;\n        }\n        if (typeof mozIndexedDB !== 'undefined') {\n            return mozIndexedDB;\n        }\n        if (typeof OIndexedDB !== 'undefined') {\n            return OIndexedDB;\n        }\n        if (typeof msIndexedDB !== 'undefined') {\n            return msIndexedDB;\n        }\n    } catch (e) {\n        return;\n    }\n}\n\nvar idb = getIDB();\n\nfunction isIndexedDBValid() {\n    try {\n        // Initialize IndexedDB; fall back to vendor-prefixed versions\n        // if needed.\n        if (!idb) {\n            return false;\n        }\n        // We mimic PouchDB here;\n        //\n        // We test for openDatabase because IE Mobile identifies itself\n        // as Safari. Oh the lulz...\n        var isSafari = typeof openDatabase !== 'undefined' && /(Safari|iPhone|iPad|iPod)/.test(navigator.userAgent) && !/Chrome/.test(navigator.userAgent) && !/BlackBerry/.test(navigator.platform);\n\n        var hasFetch = typeof fetch === 'function' && fetch.toString().indexOf('[native code') !== -1;\n\n        // Safari <10.1 does not meet our requirements for IDB support (#5572)\n        // since Safari 10.1 shipped with fetch, we can use that to detect it\n        return (!isSafari || hasFetch) && typeof indexedDB !== 'undefined' &&\n        // some outdated implementations of IDB that appear on Samsung\n        // and HTC Android devices <4.4 are missing IDBKeyRange\n        // See: https://github.com/mozilla/localForage/issues/128\n        // See: https://github.com/mozilla/localForage/issues/272\n        typeof IDBKeyRange !== 'undefined';\n    } catch (e) {\n        return false;\n    }\n}\n\n// Abstracts constructing a Blob object, so it also works in older\n// browsers that don't support the native Blob constructor. (i.e.\n// old QtWebKit versions, at least).\n// Abstracts constructing a Blob object, so it also works in older\n// browsers that don't support the native Blob constructor. (i.e.\n// old QtWebKit versions, at least).\nfunction createBlob(parts, properties) {\n    /* global BlobBuilder,MSBlobBuilder,MozBlobBuilder,WebKitBlobBuilder */\n    parts = parts || [];\n    properties = properties || {};\n    try {\n        return new Blob(parts, properties);\n    } catch (e) {\n        if (e.name !== 'TypeError') {\n            throw e;\n        }\n        var Builder = typeof BlobBuilder !== 'undefined' ? BlobBuilder : typeof MSBlobBuilder !== 'undefined' ? MSBlobBuilder : typeof MozBlobBuilder !== 'undefined' ? MozBlobBuilder : WebKitBlobBuilder;\n        var builder = new Builder();\n        for (var i = 0; i < parts.length; i += 1) {\n            builder.append(parts[i]);\n        }\n        return builder.getBlob(properties.type);\n    }\n}\n\n// This is CommonJS because lie is an external dependency, so Rollup\n// can just ignore it.\nif (typeof Promise === 'undefined') {\n    // In the \"nopromises\" build this will just throw if you don't have\n    // a global promise object, but it would throw anyway later.\n    _dereq_(3);\n}\nvar Promise$1 = Promise;\n\nfunction executeCallback(promise, callback) {\n    if (callback) {\n        promise.then(function (result) {\n            callback(null, result);\n        }, function (error) {\n            callback(error);\n        });\n    }\n}\n\nfunction executeTwoCallbacks(promise, callback, errorCallback) {\n    if (typeof callback === 'function') {\n        promise.then(callback);\n    }\n\n    if (typeof errorCallback === 'function') {\n        promise[\"catch\"](errorCallback);\n    }\n}\n\nfunction normalizeKey(key) {\n    // Cast the key to a string, as that's all we can set as a key.\n    if (typeof key !== 'string') {\n        console.warn(key + ' used as a key, but it is not a string.');\n        key = String(key);\n    }\n\n    return key;\n}\n\nfunction getCallback() {\n    if (arguments.length && typeof arguments[arguments.length - 1] === 'function') {\n        return arguments[arguments.length - 1];\n    }\n}\n\n// Some code originally from async_storage.js in\n// [Gaia](https://github.com/mozilla-b2g/gaia).\n\nvar DETECT_BLOB_SUPPORT_STORE = 'local-forage-detect-blob-support';\nvar supportsBlobs = void 0;\nvar dbContexts = {};\nvar toString = Object.prototype.toString;\n\n// Transaction Modes\nvar READ_ONLY = 'readonly';\nvar READ_WRITE = 'readwrite';\n\n// Transform a binary string to an array buffer, because otherwise\n// weird stuff happens when you try to work with the binary string directly.\n// It is known.\n// From http://stackoverflow.com/questions/14967647/ (continues on next line)\n// encode-decode-image-with-base64-breaks-image (2013-04-21)\nfunction _binStringToArrayBuffer(bin) {\n    var length = bin.length;\n    var buf = new ArrayBuffer(length);\n    var arr = new Uint8Array(buf);\n    for (var i = 0; i < length; i++) {\n        arr[i] = bin.charCodeAt(i);\n    }\n    return buf;\n}\n\n//\n// Blobs are not supported in all versions of IndexedDB, notably\n// Chrome <37 and Android <5. In those versions, storing a blob will throw.\n//\n// Various other blob bugs exist in Chrome v37-42 (inclusive).\n// Detecting them is expensive and confusing to users, and Chrome 37-42\n// is at very low usage worldwide, so we do a hacky userAgent check instead.\n//\n// content-type bug: https://code.google.com/p/chromium/issues/detail?id=408120\n// 404 bug: https://code.google.com/p/chromium/issues/detail?id=447916\n// FileReader bug: https://code.google.com/p/chromium/issues/detail?id=447836\n//\n// Code borrowed from PouchDB. See:\n// https://github.com/pouchdb/pouchdb/blob/master/packages/node_modules/pouchdb-adapter-idb/src/blobSupport.js\n//\nfunction _checkBlobSupportWithoutCaching(idb) {\n    return new Promise$1(function (resolve) {\n        var txn = idb.transaction(DETECT_BLOB_SUPPORT_STORE, READ_WRITE);\n        var blob = createBlob(['']);\n        txn.objectStore(DETECT_BLOB_SUPPORT_STORE).put(blob, 'key');\n\n        txn.onabort = function (e) {\n            // If the transaction aborts now its due to not being able to\n            // write to the database, likely due to the disk being full\n            e.preventDefault();\n            e.stopPropagation();\n            resolve(false);\n        };\n\n        txn.oncomplete = function () {\n            var matchedChrome = navigator.userAgent.match(/Chrome\\/(\\d+)/);\n            var matchedEdge = navigator.userAgent.match(/Edge\\//);\n            // MS Edge pretends to be Chrome 42:\n            // https://msdn.microsoft.com/en-us/library/hh869301%28v=vs.85%29.aspx\n            resolve(matchedEdge || !matchedChrome || parseInt(matchedChrome[1], 10) >= 43);\n        };\n    })[\"catch\"](function () {\n        return false; // error, so assume unsupported\n    });\n}\n\nfunction _checkBlobSupport(idb) {\n    if (typeof supportsBlobs === 'boolean') {\n        return Promise$1.resolve(supportsBlobs);\n    }\n    return _checkBlobSupportWithoutCaching(idb).then(function (value) {\n        supportsBlobs = value;\n        return supportsBlobs;\n    });\n}\n\nfunction _deferReadiness(dbInfo) {\n    var dbContext = dbContexts[dbInfo.name];\n\n    // Create a deferred object representing the current database operation.\n    var deferredOperation = {};\n\n    deferredOperation.promise = new Promise$1(function (resolve, reject) {\n        deferredOperation.resolve = resolve;\n        deferredOperation.reject = reject;\n    });\n\n    // Enqueue the deferred operation.\n    dbContext.deferredOperations.push(deferredOperation);\n\n    // Chain its promise to the database readiness.\n    if (!dbContext.dbReady) {\n        dbContext.dbReady = deferredOperation.promise;\n    } else {\n        dbContext.dbReady = dbContext.dbReady.then(function () {\n            return deferredOperation.promise;\n        });\n    }\n}\n\nfunction _advanceReadiness(dbInfo) {\n    var dbContext = dbContexts[dbInfo.name];\n\n    // Dequeue a deferred operation.\n    var deferredOperation = dbContext.deferredOperations.pop();\n\n    // Resolve its promise (which is part of the database readiness\n    // chain of promises).\n    if (deferredOperation) {\n        deferredOperation.resolve();\n        return deferredOperation.promise;\n    }\n}\n\nfunction _rejectReadiness(dbInfo, err) {\n    var dbContext = dbContexts[dbInfo.name];\n\n    // Dequeue a deferred operation.\n    var deferredOperation = dbContext.deferredOperations.pop();\n\n    // Reject its promise (which is part of the database readiness\n    // chain of promises).\n    if (deferredOperation) {\n        deferredOperation.reject(err);\n        return deferredOperation.promise;\n    }\n}\n\nfunction _getConnection(dbInfo, upgradeNeeded) {\n    return new Promise$1(function (resolve, reject) {\n        dbContexts[dbInfo.name] = dbContexts[dbInfo.name] || createDbContext();\n\n        if (dbInfo.db) {\n            if (upgradeNeeded) {\n                _deferReadiness(dbInfo);\n                dbInfo.db.close();\n            } else {\n                return resolve(dbInfo.db);\n            }\n        }\n\n        var dbArgs = [dbInfo.name];\n\n        if (upgradeNeeded) {\n            dbArgs.push(dbInfo.version);\n        }\n\n        var openreq = idb.open.apply(idb, dbArgs);\n\n        if (upgradeNeeded) {\n            openreq.onupgradeneeded = function (e) {\n                var db = openreq.result;\n                try {\n                    db.createObjectStore(dbInfo.storeName);\n                    if (e.oldVersion <= 1) {\n                        // Added when support for blob shims was added\n                        db.createObjectStore(DETECT_BLOB_SUPPORT_STORE);\n                    }\n                } catch (ex) {\n                    if (ex.name === 'ConstraintError') {\n                        console.warn('The database \"' + dbInfo.name + '\"' + ' has been upgraded from version ' + e.oldVersion + ' to version ' + e.newVersion + ', but the storage \"' + dbInfo.storeName + '\" already exists.');\n                    } else {\n                        throw ex;\n                    }\n                }\n            };\n        }\n\n        openreq.onerror = function (e) {\n            e.preventDefault();\n            reject(openreq.error);\n        };\n\n        openreq.onsuccess = function () {\n            resolve(openreq.result);\n            _advanceReadiness(dbInfo);\n        };\n    });\n}\n\nfunction _getOriginalConnection(dbInfo) {\n    return _getConnection(dbInfo, false);\n}\n\nfunction _getUpgradedConnection(dbInfo) {\n    return _getConnection(dbInfo, true);\n}\n\nfunction _isUpgradeNeeded(dbInfo, defaultVersion) {\n    if (!dbInfo.db) {\n        return true;\n    }\n\n    var isNewStore = !dbInfo.db.objectStoreNames.contains(dbInfo.storeName);\n    var isDowngrade = dbInfo.version < dbInfo.db.version;\n    var isUpgrade = dbInfo.version > dbInfo.db.version;\n\n    if (isDowngrade) {\n        // If the version is not the default one\n        // then warn for impossible downgrade.\n        if (dbInfo.version !== defaultVersion) {\n            console.warn('The database \"' + dbInfo.name + '\"' + \" can't be downgraded from version \" + dbInfo.db.version + ' to version ' + dbInfo.version + '.');\n        }\n        // Align the versions to prevent errors.\n        dbInfo.version = dbInfo.db.version;\n    }\n\n    if (isUpgrade || isNewStore) {\n        // If the store is new then increment the version (if needed).\n        // This will trigger an \"upgradeneeded\" event which is required\n        // for creating a store.\n        if (isNewStore) {\n            var incVersion = dbInfo.db.version + 1;\n            if (incVersion > dbInfo.version) {\n                dbInfo.version = incVersion;\n            }\n        }\n\n        return true;\n    }\n\n    return false;\n}\n\n// encode a blob for indexeddb engines that don't support blobs\nfunction _encodeBlob(blob) {\n    return new Promise$1(function (resolve, reject) {\n        var reader = new FileReader();\n        reader.onerror = reject;\n        reader.onloadend = function (e) {\n            var base64 = btoa(e.target.result || '');\n            resolve({\n                __local_forage_encoded_blob: true,\n                data: base64,\n                type: blob.type\n            });\n        };\n        reader.readAsBinaryString(blob);\n    });\n}\n\n// decode an encoded blob\nfunction _decodeBlob(encodedBlob) {\n    var arrayBuff = _binStringToArrayBuffer(atob(encodedBlob.data));\n    return createBlob([arrayBuff], { type: encodedBlob.type });\n}\n\n// is this one of our fancy encoded blobs?\nfunction _isEncodedBlob(value) {\n    return value && value.__local_forage_encoded_blob;\n}\n\n// Specialize the default `ready()` function by making it dependent\n// on the current database operations. Thus, the driver will be actually\n// ready when it's been initialized (default) *and* there are no pending\n// operations on the database (initiated by some other instances).\nfunction _fullyReady(callback) {\n    var self = this;\n\n    var promise = self._initReady().then(function () {\n        var dbContext = dbContexts[self._dbInfo.name];\n\n        if (dbContext && dbContext.dbReady) {\n            return dbContext.dbReady;\n        }\n    });\n\n    executeTwoCallbacks(promise, callback, callback);\n    return promise;\n}\n\n// Try to establish a new db connection to replace the\n// current one which is broken (i.e. experiencing\n// InvalidStateError while creating a transaction).\nfunction _tryReconnect(dbInfo) {\n    _deferReadiness(dbInfo);\n\n    var dbContext = dbContexts[dbInfo.name];\n    var forages = dbContext.forages;\n\n    for (var i = 0; i < forages.length; i++) {\n        var forage = forages[i];\n        if (forage._dbInfo.db) {\n            forage._dbInfo.db.close();\n            forage._dbInfo.db = null;\n        }\n    }\n    dbInfo.db = null;\n\n    return _getOriginalConnection(dbInfo).then(function (db) {\n        dbInfo.db = db;\n        if (_isUpgradeNeeded(dbInfo)) {\n            // Reopen the database for upgrading.\n            return _getUpgradedConnection(dbInfo);\n        }\n        return db;\n    }).then(function (db) {\n        // store the latest db reference\n        // in case the db was upgraded\n        dbInfo.db = dbContext.db = db;\n        for (var i = 0; i < forages.length; i++) {\n            forages[i]._dbInfo.db = db;\n        }\n    })[\"catch\"](function (err) {\n        _rejectReadiness(dbInfo, err);\n        throw err;\n    });\n}\n\n// FF doesn't like Promises (micro-tasks) and IDDB store operations,\n// so we have to do it with callbacks\nfunction createTransaction(dbInfo, mode, callback, retries) {\n    if (retries === undefined) {\n        retries = 1;\n    }\n\n    try {\n        var tx = dbInfo.db.transaction(dbInfo.storeName, mode);\n        callback(null, tx);\n    } catch (err) {\n        if (retries > 0 && (!dbInfo.db || err.name === 'InvalidStateError' || err.name === 'NotFoundError')) {\n            return Promise$1.resolve().then(function () {\n                if (!dbInfo.db || err.name === 'NotFoundError' && !dbInfo.db.objectStoreNames.contains(dbInfo.storeName) && dbInfo.version <= dbInfo.db.version) {\n                    // increase the db version, to create the new ObjectStore\n                    if (dbInfo.db) {\n                        dbInfo.version = dbInfo.db.version + 1;\n                    }\n                    // Reopen the database for upgrading.\n                    return _getUpgradedConnection(dbInfo);\n                }\n            }).then(function () {\n                return _tryReconnect(dbInfo).then(function () {\n                    createTransaction(dbInfo, mode, callback, retries - 1);\n                });\n            })[\"catch\"](callback);\n        }\n\n        callback(err);\n    }\n}\n\nfunction createDbContext() {\n    return {\n        // Running localForages sharing a database.\n        forages: [],\n        // Shared database.\n        db: null,\n        // Database readiness (promise).\n        dbReady: null,\n        // Deferred operations on the database.\n        deferredOperations: []\n    };\n}\n\n// Open the IndexedDB database (automatically creates one if one didn't\n// previously exist), using any options set in the config.\nfunction _initStorage(options) {\n    var self = this;\n    var dbInfo = {\n        db: null\n    };\n\n    if (options) {\n        for (var i in options) {\n            dbInfo[i] = options[i];\n        }\n    }\n\n    // Get the current context of the database;\n    var dbContext = dbContexts[dbInfo.name];\n\n    // ...or create a new context.\n    if (!dbContext) {\n        dbContext = createDbContext();\n        // Register the new context in the global container.\n        dbContexts[dbInfo.name] = dbContext;\n    }\n\n    // Register itself as a running localForage in the current context.\n    dbContext.forages.push(self);\n\n    // Replace the default `ready()` function with the specialized one.\n    if (!self._initReady) {\n        self._initReady = self.ready;\n        self.ready = _fullyReady;\n    }\n\n    // Create an array of initialization states of the related localForages.\n    var initPromises = [];\n\n    function ignoreErrors() {\n        // Don't handle errors here,\n        // just makes sure related localForages aren't pending.\n        return Promise$1.resolve();\n    }\n\n    for (var j = 0; j < dbContext.forages.length; j++) {\n        var forage = dbContext.forages[j];\n        if (forage !== self) {\n            // Don't wait for itself...\n            initPromises.push(forage._initReady()[\"catch\"](ignoreErrors));\n        }\n    }\n\n    // Take a snapshot of the related localForages.\n    var forages = dbContext.forages.slice(0);\n\n    // Initialize the connection process only when\n    // all the related localForages aren't pending.\n    return Promise$1.all(initPromises).then(function () {\n        dbInfo.db = dbContext.db;\n        // Get the connection or open a new one without upgrade.\n        return _getOriginalConnection(dbInfo);\n    }).then(function (db) {\n        dbInfo.db = db;\n        if (_isUpgradeNeeded(dbInfo, self._defaultConfig.version)) {\n            // Reopen the database for upgrading.\n            return _getUpgradedConnection(dbInfo);\n        }\n        return db;\n    }).then(function (db) {\n        dbInfo.db = dbContext.db = db;\n        self._dbInfo = dbInfo;\n        // Share the final connection amongst related localForages.\n        for (var k = 0; k < forages.length; k++) {\n            var forage = forages[k];\n            if (forage !== self) {\n                // Self is already up-to-date.\n                forage._dbInfo.db = dbInfo.db;\n                forage._dbInfo.version = dbInfo.version;\n            }\n        }\n    });\n}\n\nfunction getItem(key, callback) {\n    var self = this;\n\n    key = normalizeKey(key);\n\n    var promise = new Promise$1(function (resolve, reject) {\n        self.ready().then(function () {\n            createTransaction(self._dbInfo, READ_ONLY, function (err, transaction) {\n                if (err) {\n                    return reject(err);\n                }\n\n                try {\n                    var store = transaction.objectStore(self._dbInfo.storeName);\n                    var req = store.get(key);\n\n                    req.onsuccess = function () {\n                        var value = req.result;\n                        if (value === undefined) {\n                            value = null;\n                        }\n                        if (_isEncodedBlob(value)) {\n                            value = _decodeBlob(value);\n                        }\n                        resolve(value);\n                    };\n\n                    req.onerror = function () {\n                        reject(req.error);\n                    };\n                } catch (e) {\n                    reject(e);\n                }\n            });\n        })[\"catch\"](reject);\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\n// Iterate over all items stored in database.\nfunction iterate(iterator, callback) {\n    var self = this;\n\n    var promise = new Promise$1(function (resolve, reject) {\n        self.ready().then(function () {\n            createTransaction(self._dbInfo, READ_ONLY, function (err, transaction) {\n                if (err) {\n                    return reject(err);\n                }\n\n                try {\n                    var store = transaction.objectStore(self._dbInfo.storeName);\n                    var req = store.openCursor();\n                    var iterationNumber = 1;\n\n                    req.onsuccess = function () {\n                        var cursor = req.result;\n\n                        if (cursor) {\n                            var value = cursor.value;\n                            if (_isEncodedBlob(value)) {\n                                value = _decodeBlob(value);\n                            }\n                            var result = iterator(value, cursor.key, iterationNumber++);\n\n                            // when the iterator callback retuns any\n                            // (non-`undefined`) value, then we stop\n                            // the iteration immediately\n                            if (result !== void 0) {\n                                resolve(result);\n                            } else {\n                                cursor[\"continue\"]();\n                            }\n                        } else {\n                            resolve();\n                        }\n                    };\n\n                    req.onerror = function () {\n                        reject(req.error);\n                    };\n                } catch (e) {\n                    reject(e);\n                }\n            });\n        })[\"catch\"](reject);\n    });\n\n    executeCallback(promise, callback);\n\n    return promise;\n}\n\nfunction setItem(key, value, callback) {\n    var self = this;\n\n    key = normalizeKey(key);\n\n    var promise = new Promise$1(function (resolve, reject) {\n        var dbInfo;\n        self.ready().then(function () {\n            dbInfo = self._dbInfo;\n            if (toString.call(value) === '[object Blob]') {\n                return _checkBlobSupport(dbInfo.db).then(function (blobSupport) {\n                    if (blobSupport) {\n                        return value;\n                    }\n                    return _encodeBlob(value);\n                });\n            }\n            return value;\n        }).then(function (value) {\n            createTransaction(self._dbInfo, READ_WRITE, function (err, transaction) {\n                if (err) {\n                    return reject(err);\n                }\n\n                try {\n                    var store = transaction.objectStore(self._dbInfo.storeName);\n\n                    // The reason we don't _save_ null is because IE 10 does\n                    // not support saving the `null` type in IndexedDB. How\n                    // ironic, given the bug below!\n                    // See: https://github.com/mozilla/localForage/issues/161\n                    if (value === null) {\n                        value = undefined;\n                    }\n\n                    var req = store.put(value, key);\n\n                    transaction.oncomplete = function () {\n                        // Cast to undefined so the value passed to\n                        // callback/promise is the same as what one would get out\n                        // of `getItem()` later. This leads to some weirdness\n                        // (setItem('foo', undefined) will return `null`), but\n                        // it's not my fault localStorage is our baseline and that\n                        // it's weird.\n                        if (value === undefined) {\n                            value = null;\n                        }\n\n                        resolve(value);\n                    };\n                    transaction.onabort = transaction.onerror = function () {\n                        var err = req.error ? req.error : req.transaction.error;\n                        reject(err);\n                    };\n                } catch (e) {\n                    reject(e);\n                }\n            });\n        })[\"catch\"](reject);\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\nfunction removeItem(key, callback) {\n    var self = this;\n\n    key = normalizeKey(key);\n\n    var promise = new Promise$1(function (resolve, reject) {\n        self.ready().then(function () {\n            createTransaction(self._dbInfo, READ_WRITE, function (err, transaction) {\n                if (err) {\n                    return reject(err);\n                }\n\n                try {\n                    var store = transaction.objectStore(self._dbInfo.storeName);\n                    // We use a Grunt task to make this safe for IE and some\n                    // versions of Android (including those used by Cordova).\n                    // Normally IE won't like `.delete()` and will insist on\n                    // using `['delete']()`, but we have a build step that\n                    // fixes this for us now.\n                    var req = store[\"delete\"](key);\n                    transaction.oncomplete = function () {\n                        resolve();\n                    };\n\n                    transaction.onerror = function () {\n                        reject(req.error);\n                    };\n\n                    // The request will be also be aborted if we've exceeded our storage\n                    // space.\n                    transaction.onabort = function () {\n                        var err = req.error ? req.error : req.transaction.error;\n                        reject(err);\n                    };\n                } catch (e) {\n                    reject(e);\n                }\n            });\n        })[\"catch\"](reject);\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\nfunction clear(callback) {\n    var self = this;\n\n    var promise = new Promise$1(function (resolve, reject) {\n        self.ready().then(function () {\n            createTransaction(self._dbInfo, READ_WRITE, function (err, transaction) {\n                if (err) {\n                    return reject(err);\n                }\n\n                try {\n                    var store = transaction.objectStore(self._dbInfo.storeName);\n                    var req = store.clear();\n\n                    transaction.oncomplete = function () {\n                        resolve();\n                    };\n\n                    transaction.onabort = transaction.onerror = function () {\n                        var err = req.error ? req.error : req.transaction.error;\n                        reject(err);\n                    };\n                } catch (e) {\n                    reject(e);\n                }\n            });\n        })[\"catch\"](reject);\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\nfunction length(callback) {\n    var self = this;\n\n    var promise = new Promise$1(function (resolve, reject) {\n        self.ready().then(function () {\n            createTransaction(self._dbInfo, READ_ONLY, function (err, transaction) {\n                if (err) {\n                    return reject(err);\n                }\n\n                try {\n                    var store = transaction.objectStore(self._dbInfo.storeName);\n                    var req = store.count();\n\n                    req.onsuccess = function () {\n                        resolve(req.result);\n                    };\n\n                    req.onerror = function () {\n                        reject(req.error);\n                    };\n                } catch (e) {\n                    reject(e);\n                }\n            });\n        })[\"catch\"](reject);\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\nfunction key(n, callback) {\n    var self = this;\n\n    var promise = new Promise$1(function (resolve, reject) {\n        if (n < 0) {\n            resolve(null);\n\n            return;\n        }\n\n        self.ready().then(function () {\n            createTransaction(self._dbInfo, READ_ONLY, function (err, transaction) {\n                if (err) {\n                    return reject(err);\n                }\n\n                try {\n                    var store = transaction.objectStore(self._dbInfo.storeName);\n                    var advanced = false;\n                    var req = store.openCursor();\n\n                    req.onsuccess = function () {\n                        var cursor = req.result;\n                        if (!cursor) {\n                            // this means there weren't enough keys\n                            resolve(null);\n\n                            return;\n                        }\n\n                        if (n === 0) {\n                            // We have the first key, return it if that's what they\n                            // wanted.\n                            resolve(cursor.key);\n                        } else {\n                            if (!advanced) {\n                                // Otherwise, ask the cursor to skip ahead n\n                                // records.\n                                advanced = true;\n                                cursor.advance(n);\n                            } else {\n                                // When we get here, we've got the nth key.\n                                resolve(cursor.key);\n                            }\n                        }\n                    };\n\n                    req.onerror = function () {\n                        reject(req.error);\n                    };\n                } catch (e) {\n                    reject(e);\n                }\n            });\n        })[\"catch\"](reject);\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\nfunction keys(callback) {\n    var self = this;\n\n    var promise = new Promise$1(function (resolve, reject) {\n        self.ready().then(function () {\n            createTransaction(self._dbInfo, READ_ONLY, function (err, transaction) {\n                if (err) {\n                    return reject(err);\n                }\n\n                try {\n                    var store = transaction.objectStore(self._dbInfo.storeName);\n                    var req = store.openCursor();\n                    var keys = [];\n\n                    req.onsuccess = function () {\n                        var cursor = req.result;\n\n                        if (!cursor) {\n                            resolve(keys);\n                            return;\n                        }\n\n                        keys.push(cursor.key);\n                        cursor[\"continue\"]();\n                    };\n\n                    req.onerror = function () {\n                        reject(req.error);\n                    };\n                } catch (e) {\n                    reject(e);\n                }\n            });\n        })[\"catch\"](reject);\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\nfunction dropInstance(options, callback) {\n    callback = getCallback.apply(this, arguments);\n\n    var currentConfig = this.config();\n    options = typeof options !== 'function' && options || {};\n    if (!options.name) {\n        options.name = options.name || currentConfig.name;\n        options.storeName = options.storeName || currentConfig.storeName;\n    }\n\n    var self = this;\n    var promise;\n    if (!options.name) {\n        promise = Promise$1.reject('Invalid arguments');\n    } else {\n        var isCurrentDb = options.name === currentConfig.name && self._dbInfo.db;\n\n        var dbPromise = isCurrentDb ? Promise$1.resolve(self._dbInfo.db) : _getOriginalConnection(options).then(function (db) {\n            var dbContext = dbContexts[options.name];\n            var forages = dbContext.forages;\n            dbContext.db = db;\n            for (var i = 0; i < forages.length; i++) {\n                forages[i]._dbInfo.db = db;\n            }\n            return db;\n        });\n\n        if (!options.storeName) {\n            promise = dbPromise.then(function (db) {\n                _deferReadiness(options);\n\n                var dbContext = dbContexts[options.name];\n                var forages = dbContext.forages;\n\n                db.close();\n                for (var i = 0; i < forages.length; i++) {\n                    var forage = forages[i];\n                    forage._dbInfo.db = null;\n                }\n\n                var dropDBPromise = new Promise$1(function (resolve, reject) {\n                    var req = idb.deleteDatabase(options.name);\n\n                    req.onerror = req.onblocked = function (err) {\n                        var db = req.result;\n                        if (db) {\n                            db.close();\n                        }\n                        reject(err);\n                    };\n\n                    req.onsuccess = function () {\n                        var db = req.result;\n                        if (db) {\n                            db.close();\n                        }\n                        resolve(db);\n                    };\n                });\n\n                return dropDBPromise.then(function (db) {\n                    dbContext.db = db;\n                    for (var i = 0; i < forages.length; i++) {\n                        var _forage = forages[i];\n                        _advanceReadiness(_forage._dbInfo);\n                    }\n                })[\"catch\"](function (err) {\n                    (_rejectReadiness(options, err) || Promise$1.resolve())[\"catch\"](function () {});\n                    throw err;\n                });\n            });\n        } else {\n            promise = dbPromise.then(function (db) {\n                if (!db.objectStoreNames.contains(options.storeName)) {\n                    return;\n                }\n\n                var newVersion = db.version + 1;\n\n                _deferReadiness(options);\n\n                var dbContext = dbContexts[options.name];\n                var forages = dbContext.forages;\n\n                db.close();\n                for (var i = 0; i < forages.length; i++) {\n                    var forage = forages[i];\n                    forage._dbInfo.db = null;\n                    forage._dbInfo.version = newVersion;\n                }\n\n                var dropObjectPromise = new Promise$1(function (resolve, reject) {\n                    var req = idb.open(options.name, newVersion);\n\n                    req.onerror = function (err) {\n                        var db = req.result;\n                        db.close();\n                        reject(err);\n                    };\n\n                    req.onupgradeneeded = function () {\n                        var db = req.result;\n                        db.deleteObjectStore(options.storeName);\n                    };\n\n                    req.onsuccess = function () {\n                        var db = req.result;\n                        db.close();\n                        resolve(db);\n                    };\n                });\n\n                return dropObjectPromise.then(function (db) {\n                    dbContext.db = db;\n                    for (var j = 0; j < forages.length; j++) {\n                        var _forage2 = forages[j];\n                        _forage2._dbInfo.db = db;\n                        _advanceReadiness(_forage2._dbInfo);\n                    }\n                })[\"catch\"](function (err) {\n                    (_rejectReadiness(options, err) || Promise$1.resolve())[\"catch\"](function () {});\n                    throw err;\n                });\n            });\n        }\n    }\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\nvar asyncStorage = {\n    _driver: 'asyncStorage',\n    _initStorage: _initStorage,\n    _support: isIndexedDBValid(),\n    iterate: iterate,\n    getItem: getItem,\n    setItem: setItem,\n    removeItem: removeItem,\n    clear: clear,\n    length: length,\n    key: key,\n    keys: keys,\n    dropInstance: dropInstance\n};\n\nfunction isWebSQLValid() {\n    return typeof openDatabase === 'function';\n}\n\n// Sadly, the best way to save binary data in WebSQL/localStorage is serializing\n// it to Base64, so this is how we store it to prevent very strange errors with less\n// verbose ways of binary <-> string data storage.\nvar BASE_CHARS = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n\nvar BLOB_TYPE_PREFIX = '~~local_forage_type~';\nvar BLOB_TYPE_PREFIX_REGEX = /^~~local_forage_type~([^~]+)~/;\n\nvar SERIALIZED_MARKER = '__lfsc__:';\nvar SERIALIZED_MARKER_LENGTH = SERIALIZED_MARKER.length;\n\n// OMG the serializations!\nvar TYPE_ARRAYBUFFER = 'arbf';\nvar TYPE_BLOB = 'blob';\nvar TYPE_INT8ARRAY = 'si08';\nvar TYPE_UINT8ARRAY = 'ui08';\nvar TYPE_UINT8CLAMPEDARRAY = 'uic8';\nvar TYPE_INT16ARRAY = 'si16';\nvar TYPE_INT32ARRAY = 'si32';\nvar TYPE_UINT16ARRAY = 'ur16';\nvar TYPE_UINT32ARRAY = 'ui32';\nvar TYPE_FLOAT32ARRAY = 'fl32';\nvar TYPE_FLOAT64ARRAY = 'fl64';\nvar TYPE_SERIALIZED_MARKER_LENGTH = SERIALIZED_MARKER_LENGTH + TYPE_ARRAYBUFFER.length;\n\nvar toString$1 = Object.prototype.toString;\n\nfunction stringToBuffer(serializedString) {\n    // Fill the string into a ArrayBuffer.\n    var bufferLength = serializedString.length * 0.75;\n    var len = serializedString.length;\n    var i;\n    var p = 0;\n    var encoded1, encoded2, encoded3, encoded4;\n\n    if (serializedString[serializedString.length - 1] === '=') {\n        bufferLength--;\n        if (serializedString[serializedString.length - 2] === '=') {\n            bufferLength--;\n        }\n    }\n\n    var buffer = new ArrayBuffer(bufferLength);\n    var bytes = new Uint8Array(buffer);\n\n    for (i = 0; i < len; i += 4) {\n        encoded1 = BASE_CHARS.indexOf(serializedString[i]);\n        encoded2 = BASE_CHARS.indexOf(serializedString[i + 1]);\n        encoded3 = BASE_CHARS.indexOf(serializedString[i + 2]);\n        encoded4 = BASE_CHARS.indexOf(serializedString[i + 3]);\n\n        /*jslint bitwise: true */\n        bytes[p++] = encoded1 << 2 | encoded2 >> 4;\n        bytes[p++] = (encoded2 & 15) << 4 | encoded3 >> 2;\n        bytes[p++] = (encoded3 & 3) << 6 | encoded4 & 63;\n    }\n    return buffer;\n}\n\n// Converts a buffer to a string to store, serialized, in the backend\n// storage library.\nfunction bufferToString(buffer) {\n    // base64-arraybuffer\n    var bytes = new Uint8Array(buffer);\n    var base64String = '';\n    var i;\n\n    for (i = 0; i < bytes.length; i += 3) {\n        /*jslint bitwise: true */\n        base64String += BASE_CHARS[bytes[i] >> 2];\n        base64String += BASE_CHARS[(bytes[i] & 3) << 4 | bytes[i + 1] >> 4];\n        base64String += BASE_CHARS[(bytes[i + 1] & 15) << 2 | bytes[i + 2] >> 6];\n        base64String += BASE_CHARS[bytes[i + 2] & 63];\n    }\n\n    if (bytes.length % 3 === 2) {\n        base64String = base64String.substring(0, base64String.length - 1) + '=';\n    } else if (bytes.length % 3 === 1) {\n        base64String = base64String.substring(0, base64String.length - 2) + '==';\n    }\n\n    return base64String;\n}\n\n// Serialize a value, afterwards executing a callback (which usually\n// instructs the `setItem()` callback/promise to be executed). This is how\n// we store binary data with localStorage.\nfunction serialize(value, callback) {\n    var valueType = '';\n    if (value) {\n        valueType = toString$1.call(value);\n    }\n\n    // Cannot use `value instanceof ArrayBuffer` or such here, as these\n    // checks fail when running the tests using casper.js...\n    //\n    // TODO: See why those tests fail and use a better solution.\n    if (value && (valueType === '[object ArrayBuffer]' || value.buffer && toString$1.call(value.buffer) === '[object ArrayBuffer]')) {\n        // Convert binary arrays to a string and prefix the string with\n        // a special marker.\n        var buffer;\n        var marker = SERIALIZED_MARKER;\n\n        if (value instanceof ArrayBuffer) {\n            buffer = value;\n            marker += TYPE_ARRAYBUFFER;\n        } else {\n            buffer = value.buffer;\n\n            if (valueType === '[object Int8Array]') {\n                marker += TYPE_INT8ARRAY;\n            } else if (valueType === '[object Uint8Array]') {\n                marker += TYPE_UINT8ARRAY;\n            } else if (valueType === '[object Uint8ClampedArray]') {\n                marker += TYPE_UINT8CLAMPEDARRAY;\n            } else if (valueType === '[object Int16Array]') {\n                marker += TYPE_INT16ARRAY;\n            } else if (valueType === '[object Uint16Array]') {\n                marker += TYPE_UINT16ARRAY;\n            } else if (valueType === '[object Int32Array]') {\n                marker += TYPE_INT32ARRAY;\n            } else if (valueType === '[object Uint32Array]') {\n                marker += TYPE_UINT32ARRAY;\n            } else if (valueType === '[object Float32Array]') {\n                marker += TYPE_FLOAT32ARRAY;\n            } else if (valueType === '[object Float64Array]') {\n                marker += TYPE_FLOAT64ARRAY;\n            } else {\n                callback(new Error('Failed to get type for BinaryArray'));\n            }\n        }\n\n        callback(marker + bufferToString(buffer));\n    } else if (valueType === '[object Blob]') {\n        // Conver the blob to a binaryArray and then to a string.\n        var fileReader = new FileReader();\n\n        fileReader.onload = function () {\n            // Backwards-compatible prefix for the blob type.\n            var str = BLOB_TYPE_PREFIX + value.type + '~' + bufferToString(this.result);\n\n            callback(SERIALIZED_MARKER + TYPE_BLOB + str);\n        };\n\n        fileReader.readAsArrayBuffer(value);\n    } else {\n        try {\n            callback(JSON.stringify(value));\n        } catch (e) {\n            console.error(\"Couldn't convert value into a JSON string: \", value);\n\n            callback(null, e);\n        }\n    }\n}\n\n// Deserialize data we've inserted into a value column/field. We place\n// special markers into our strings to mark them as encoded; this isn't\n// as nice as a meta field, but it's the only sane thing we can do whilst\n// keeping localStorage support intact.\n//\n// Oftentimes this will just deserialize JSON content, but if we have a\n// special marker (SERIALIZED_MARKER, defined above), we will extract\n// some kind of arraybuffer/binary data/typed array out of the string.\nfunction deserialize(value) {\n    // If we haven't marked this string as being specially serialized (i.e.\n    // something other than serialized JSON), we can just return it and be\n    // done with it.\n    if (value.substring(0, SERIALIZED_MARKER_LENGTH) !== SERIALIZED_MARKER) {\n        return JSON.parse(value);\n    }\n\n    // The following code deals with deserializing some kind of Blob or\n    // TypedArray. First we separate out the type of data we're dealing\n    // with from the data itself.\n    var serializedString = value.substring(TYPE_SERIALIZED_MARKER_LENGTH);\n    var type = value.substring(SERIALIZED_MARKER_LENGTH, TYPE_SERIALIZED_MARKER_LENGTH);\n\n    var blobType;\n    // Backwards-compatible blob type serialization strategy.\n    // DBs created with older versions of localForage will simply not have the blob type.\n    if (type === TYPE_BLOB && BLOB_TYPE_PREFIX_REGEX.test(serializedString)) {\n        var matcher = serializedString.match(BLOB_TYPE_PREFIX_REGEX);\n        blobType = matcher[1];\n        serializedString = serializedString.substring(matcher[0].length);\n    }\n    var buffer = stringToBuffer(serializedString);\n\n    // Return the right type based on the code/type set during\n    // serialization.\n    switch (type) {\n        case TYPE_ARRAYBUFFER:\n            return buffer;\n        case TYPE_BLOB:\n            return createBlob([buffer], { type: blobType });\n        case TYPE_INT8ARRAY:\n            return new Int8Array(buffer);\n        case TYPE_UINT8ARRAY:\n            return new Uint8Array(buffer);\n        case TYPE_UINT8CLAMPEDARRAY:\n            return new Uint8ClampedArray(buffer);\n        case TYPE_INT16ARRAY:\n            return new Int16Array(buffer);\n        case TYPE_UINT16ARRAY:\n            return new Uint16Array(buffer);\n        case TYPE_INT32ARRAY:\n            return new Int32Array(buffer);\n        case TYPE_UINT32ARRAY:\n            return new Uint32Array(buffer);\n        case TYPE_FLOAT32ARRAY:\n            return new Float32Array(buffer);\n        case TYPE_FLOAT64ARRAY:\n            return new Float64Array(buffer);\n        default:\n            throw new Error('Unkown type: ' + type);\n    }\n}\n\nvar localforageSerializer = {\n    serialize: serialize,\n    deserialize: deserialize,\n    stringToBuffer: stringToBuffer,\n    bufferToString: bufferToString\n};\n\n/*\n * Includes code from:\n *\n * base64-arraybuffer\n * https://github.com/niklasvh/base64-arraybuffer\n *\n * Copyright (c) 2012 Niklas von Hertzen\n * Licensed under the MIT license.\n */\n\nfunction createDbTable(t, dbInfo, callback, errorCallback) {\n    t.executeSql('CREATE TABLE IF NOT EXISTS ' + dbInfo.storeName + ' ' + '(id INTEGER PRIMARY KEY, key unique, value)', [], callback, errorCallback);\n}\n\n// Open the WebSQL database (automatically creates one if one didn't\n// previously exist), using any options set in the config.\nfunction _initStorage$1(options) {\n    var self = this;\n    var dbInfo = {\n        db: null\n    };\n\n    if (options) {\n        for (var i in options) {\n            dbInfo[i] = typeof options[i] !== 'string' ? options[i].toString() : options[i];\n        }\n    }\n\n    var dbInfoPromise = new Promise$1(function (resolve, reject) {\n        // Open the database; the openDatabase API will automatically\n        // create it for us if it doesn't exist.\n        try {\n            dbInfo.db = openDatabase(dbInfo.name, String(dbInfo.version), dbInfo.description, dbInfo.size);\n        } catch (e) {\n            return reject(e);\n        }\n\n        // Create our key/value table if it doesn't exist.\n        dbInfo.db.transaction(function (t) {\n            createDbTable(t, dbInfo, function () {\n                self._dbInfo = dbInfo;\n                resolve();\n            }, function (t, error) {\n                reject(error);\n            });\n        }, reject);\n    });\n\n    dbInfo.serializer = localforageSerializer;\n    return dbInfoPromise;\n}\n\nfunction tryExecuteSql(t, dbInfo, sqlStatement, args, callback, errorCallback) {\n    t.executeSql(sqlStatement, args, callback, function (t, error) {\n        if (error.code === error.SYNTAX_ERR) {\n            t.executeSql('SELECT name FROM sqlite_master ' + \"WHERE type='table' AND name = ?\", [dbInfo.storeName], function (t, results) {\n                if (!results.rows.length) {\n                    // if the table is missing (was deleted)\n                    // re-create it table and retry\n                    createDbTable(t, dbInfo, function () {\n                        t.executeSql(sqlStatement, args, callback, errorCallback);\n                    }, errorCallback);\n                } else {\n                    errorCallback(t, error);\n                }\n            }, errorCallback);\n        } else {\n            errorCallback(t, error);\n        }\n    }, errorCallback);\n}\n\nfunction getItem$1(key, callback) {\n    var self = this;\n\n    key = normalizeKey(key);\n\n    var promise = new Promise$1(function (resolve, reject) {\n        self.ready().then(function () {\n            var dbInfo = self._dbInfo;\n            dbInfo.db.transaction(function (t) {\n                tryExecuteSql(t, dbInfo, 'SELECT * FROM ' + dbInfo.storeName + ' WHERE key = ? LIMIT 1', [key], function (t, results) {\n                    var result = results.rows.length ? results.rows.item(0).value : null;\n\n                    // Check to see if this is serialized content we need to\n                    // unpack.\n                    if (result) {\n                        result = dbInfo.serializer.deserialize(result);\n                    }\n\n                    resolve(result);\n                }, function (t, error) {\n                    reject(error);\n                });\n            });\n        })[\"catch\"](reject);\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\nfunction iterate$1(iterator, callback) {\n    var self = this;\n\n    var promise = new Promise$1(function (resolve, reject) {\n        self.ready().then(function () {\n            var dbInfo = self._dbInfo;\n\n            dbInfo.db.transaction(function (t) {\n                tryExecuteSql(t, dbInfo, 'SELECT * FROM ' + dbInfo.storeName, [], function (t, results) {\n                    var rows = results.rows;\n                    var length = rows.length;\n\n                    for (var i = 0; i < length; i++) {\n                        var item = rows.item(i);\n                        var result = item.value;\n\n                        // Check to see if this is serialized content\n                        // we need to unpack.\n                        if (result) {\n                            result = dbInfo.serializer.deserialize(result);\n                        }\n\n                        result = iterator(result, item.key, i + 1);\n\n                        // void(0) prevents problems with redefinition\n                        // of `undefined`.\n                        if (result !== void 0) {\n                            resolve(result);\n                            return;\n                        }\n                    }\n\n                    resolve();\n                }, function (t, error) {\n                    reject(error);\n                });\n            });\n        })[\"catch\"](reject);\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\nfunction _setItem(key, value, callback, retriesLeft) {\n    var self = this;\n\n    key = normalizeKey(key);\n\n    var promise = new Promise$1(function (resolve, reject) {\n        self.ready().then(function () {\n            // The localStorage API doesn't return undefined values in an\n            // \"expected\" way, so undefined is always cast to null in all\n            // drivers. See: https://github.com/mozilla/localForage/pull/42\n            if (value === undefined) {\n                value = null;\n            }\n\n            // Save the original value to pass to the callback.\n            var originalValue = value;\n\n            var dbInfo = self._dbInfo;\n            dbInfo.serializer.serialize(value, function (value, error) {\n                if (error) {\n                    reject(error);\n                } else {\n                    dbInfo.db.transaction(function (t) {\n                        tryExecuteSql(t, dbInfo, 'INSERT OR REPLACE INTO ' + dbInfo.storeName + ' ' + '(key, value) VALUES (?, ?)', [key, value], function () {\n                            resolve(originalValue);\n                        }, function (t, error) {\n                            reject(error);\n                        });\n                    }, function (sqlError) {\n                        // The transaction failed; check\n                        // to see if it's a quota error.\n                        if (sqlError.code === sqlError.QUOTA_ERR) {\n                            // We reject the callback outright for now, but\n                            // it's worth trying to re-run the transaction.\n                            // Even if the user accepts the prompt to use\n                            // more storage on Safari, this error will\n                            // be called.\n                            //\n                            // Try to re-run the transaction.\n                            if (retriesLeft > 0) {\n                                resolve(_setItem.apply(self, [key, originalValue, callback, retriesLeft - 1]));\n                                return;\n                            }\n                            reject(sqlError);\n                        }\n                    });\n                }\n            });\n        })[\"catch\"](reject);\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\nfunction setItem$1(key, value, callback) {\n    return _setItem.apply(this, [key, value, callback, 1]);\n}\n\nfunction removeItem$1(key, callback) {\n    var self = this;\n\n    key = normalizeKey(key);\n\n    var promise = new Promise$1(function (resolve, reject) {\n        self.ready().then(function () {\n            var dbInfo = self._dbInfo;\n            dbInfo.db.transaction(function (t) {\n                tryExecuteSql(t, dbInfo, 'DELETE FROM ' + dbInfo.storeName + ' WHERE key = ?', [key], function () {\n                    resolve();\n                }, function (t, error) {\n                    reject(error);\n                });\n            });\n        })[\"catch\"](reject);\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\n// Deletes every item in the table.\n// TODO: Find out if this resets the AUTO_INCREMENT number.\nfunction clear$1(callback) {\n    var self = this;\n\n    var promise = new Promise$1(function (resolve, reject) {\n        self.ready().then(function () {\n            var dbInfo = self._dbInfo;\n            dbInfo.db.transaction(function (t) {\n                tryExecuteSql(t, dbInfo, 'DELETE FROM ' + dbInfo.storeName, [], function () {\n                    resolve();\n                }, function (t, error) {\n                    reject(error);\n                });\n            });\n        })[\"catch\"](reject);\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\n// Does a simple `COUNT(key)` to get the number of items stored in\n// localForage.\nfunction length$1(callback) {\n    var self = this;\n\n    var promise = new Promise$1(function (resolve, reject) {\n        self.ready().then(function () {\n            var dbInfo = self._dbInfo;\n            dbInfo.db.transaction(function (t) {\n                // Ahhh, SQL makes this one soooooo easy.\n                tryExecuteSql(t, dbInfo, 'SELECT COUNT(key) as c FROM ' + dbInfo.storeName, [], function (t, results) {\n                    var result = results.rows.item(0).c;\n                    resolve(result);\n                }, function (t, error) {\n                    reject(error);\n                });\n            });\n        })[\"catch\"](reject);\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\n// Return the key located at key index X; essentially gets the key from a\n// `WHERE id = ?`. This is the most efficient way I can think to implement\n// this rarely-used (in my experience) part of the API, but it can seem\n// inconsistent, because we do `INSERT OR REPLACE INTO` on `setItem()`, so\n// the ID of each key will change every time it's updated. Perhaps a stored\n// procedure for the `setItem()` SQL would solve this problem?\n// TODO: Don't change ID on `setItem()`.\nfunction key$1(n, callback) {\n    var self = this;\n\n    var promise = new Promise$1(function (resolve, reject) {\n        self.ready().then(function () {\n            var dbInfo = self._dbInfo;\n            dbInfo.db.transaction(function (t) {\n                tryExecuteSql(t, dbInfo, 'SELECT key FROM ' + dbInfo.storeName + ' WHERE id = ? LIMIT 1', [n + 1], function (t, results) {\n                    var result = results.rows.length ? results.rows.item(0).key : null;\n                    resolve(result);\n                }, function (t, error) {\n                    reject(error);\n                });\n            });\n        })[\"catch\"](reject);\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\nfunction keys$1(callback) {\n    var self = this;\n\n    var promise = new Promise$1(function (resolve, reject) {\n        self.ready().then(function () {\n            var dbInfo = self._dbInfo;\n            dbInfo.db.transaction(function (t) {\n                tryExecuteSql(t, dbInfo, 'SELECT key FROM ' + dbInfo.storeName, [], function (t, results) {\n                    var keys = [];\n\n                    for (var i = 0; i < results.rows.length; i++) {\n                        keys.push(results.rows.item(i).key);\n                    }\n\n                    resolve(keys);\n                }, function (t, error) {\n                    reject(error);\n                });\n            });\n        })[\"catch\"](reject);\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\n// https://www.w3.org/TR/webdatabase/#databases\n// > There is no way to enumerate or delete the databases available for an origin from this API.\nfunction getAllStoreNames(db) {\n    return new Promise$1(function (resolve, reject) {\n        db.transaction(function (t) {\n            t.executeSql('SELECT name FROM sqlite_master ' + \"WHERE type='table' AND name <> '__WebKitDatabaseInfoTable__'\", [], function (t, results) {\n                var storeNames = [];\n\n                for (var i = 0; i < results.rows.length; i++) {\n                    storeNames.push(results.rows.item(i).name);\n                }\n\n                resolve({\n                    db: db,\n                    storeNames: storeNames\n                });\n            }, function (t, error) {\n                reject(error);\n            });\n        }, function (sqlError) {\n            reject(sqlError);\n        });\n    });\n}\n\nfunction dropInstance$1(options, callback) {\n    callback = getCallback.apply(this, arguments);\n\n    var currentConfig = this.config();\n    options = typeof options !== 'function' && options || {};\n    if (!options.name) {\n        options.name = options.name || currentConfig.name;\n        options.storeName = options.storeName || currentConfig.storeName;\n    }\n\n    var self = this;\n    var promise;\n    if (!options.name) {\n        promise = Promise$1.reject('Invalid arguments');\n    } else {\n        promise = new Promise$1(function (resolve) {\n            var db;\n            if (options.name === currentConfig.name) {\n                // use the db reference of the current instance\n                db = self._dbInfo.db;\n            } else {\n                db = openDatabase(options.name, '', '', 0);\n            }\n\n            if (!options.storeName) {\n                // drop all database tables\n                resolve(getAllStoreNames(db));\n            } else {\n                resolve({\n                    db: db,\n                    storeNames: [options.storeName]\n                });\n            }\n        }).then(function (operationInfo) {\n            return new Promise$1(function (resolve, reject) {\n                operationInfo.db.transaction(function (t) {\n                    function dropTable(storeName) {\n                        return new Promise$1(function (resolve, reject) {\n                            t.executeSql('DROP TABLE IF EXISTS ' + storeName, [], function () {\n                                resolve();\n                            }, function (t, error) {\n                                reject(error);\n                            });\n                        });\n                    }\n\n                    var operations = [];\n                    for (var i = 0, len = operationInfo.storeNames.length; i < len; i++) {\n                        operations.push(dropTable(operationInfo.storeNames[i]));\n                    }\n\n                    Promise$1.all(operations).then(function () {\n                        resolve();\n                    })[\"catch\"](function (e) {\n                        reject(e);\n                    });\n                }, function (sqlError) {\n                    reject(sqlError);\n                });\n            });\n        });\n    }\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\nvar webSQLStorage = {\n    _driver: 'webSQLStorage',\n    _initStorage: _initStorage$1,\n    _support: isWebSQLValid(),\n    iterate: iterate$1,\n    getItem: getItem$1,\n    setItem: setItem$1,\n    removeItem: removeItem$1,\n    clear: clear$1,\n    length: length$1,\n    key: key$1,\n    keys: keys$1,\n    dropInstance: dropInstance$1\n};\n\nfunction isLocalStorageValid() {\n    try {\n        return typeof localStorage !== 'undefined' && 'setItem' in localStorage &&\n        // in IE8 typeof localStorage.setItem === 'object'\n        !!localStorage.setItem;\n    } catch (e) {\n        return false;\n    }\n}\n\nfunction _getKeyPrefix(options, defaultConfig) {\n    var keyPrefix = options.name + '/';\n\n    if (options.storeName !== defaultConfig.storeName) {\n        keyPrefix += options.storeName + '/';\n    }\n    return keyPrefix;\n}\n\n// Check if localStorage throws when saving an item\nfunction checkIfLocalStorageThrows() {\n    var localStorageTestKey = '_localforage_support_test';\n\n    try {\n        localStorage.setItem(localStorageTestKey, true);\n        localStorage.removeItem(localStorageTestKey);\n\n        return false;\n    } catch (e) {\n        return true;\n    }\n}\n\n// Check if localStorage is usable and allows to save an item\n// This method checks if localStorage is usable in Safari Private Browsing\n// mode, or in any other case where the available quota for localStorage\n// is 0 and there wasn't any saved items yet.\nfunction _isLocalStorageUsable() {\n    return !checkIfLocalStorageThrows() || localStorage.length > 0;\n}\n\n// Config the localStorage backend, using options set in the config.\nfunction _initStorage$2(options) {\n    var self = this;\n    var dbInfo = {};\n    if (options) {\n        for (var i in options) {\n            dbInfo[i] = options[i];\n        }\n    }\n\n    dbInfo.keyPrefix = _getKeyPrefix(options, self._defaultConfig);\n\n    if (!_isLocalStorageUsable()) {\n        return Promise$1.reject();\n    }\n\n    self._dbInfo = dbInfo;\n    dbInfo.serializer = localforageSerializer;\n\n    return Promise$1.resolve();\n}\n\n// Remove all keys from the datastore, effectively destroying all data in\n// the app's key/value store!\nfunction clear$2(callback) {\n    var self = this;\n    var promise = self.ready().then(function () {\n        var keyPrefix = self._dbInfo.keyPrefix;\n\n        for (var i = localStorage.length - 1; i >= 0; i--) {\n            var key = localStorage.key(i);\n\n            if (key.indexOf(keyPrefix) === 0) {\n                localStorage.removeItem(key);\n            }\n        }\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\n// Retrieve an item from the store. Unlike the original async_storage\n// library in Gaia, we don't modify return values at all. If a key's value\n// is `undefined`, we pass that value to the callback function.\nfunction getItem$2(key, callback) {\n    var self = this;\n\n    key = normalizeKey(key);\n\n    var promise = self.ready().then(function () {\n        var dbInfo = self._dbInfo;\n        var result = localStorage.getItem(dbInfo.keyPrefix + key);\n\n        // If a result was found, parse it from the serialized\n        // string into a JS object. If result isn't truthy, the key\n        // is likely undefined and we'll pass it straight to the\n        // callback.\n        if (result) {\n            result = dbInfo.serializer.deserialize(result);\n        }\n\n        return result;\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\n// Iterate over all items in the store.\nfunction iterate$2(iterator, callback) {\n    var self = this;\n\n    var promise = self.ready().then(function () {\n        var dbInfo = self._dbInfo;\n        var keyPrefix = dbInfo.keyPrefix;\n        var keyPrefixLength = keyPrefix.length;\n        var length = localStorage.length;\n\n        // We use a dedicated iterator instead of the `i` variable below\n        // so other keys we fetch in localStorage aren't counted in\n        // the `iterationNumber` argument passed to the `iterate()`\n        // callback.\n        //\n        // See: github.com/mozilla/localForage/pull/435#discussion_r38061530\n        var iterationNumber = 1;\n\n        for (var i = 0; i < length; i++) {\n            var key = localStorage.key(i);\n            if (key.indexOf(keyPrefix) !== 0) {\n                continue;\n            }\n            var value = localStorage.getItem(key);\n\n            // If a result was found, parse it from the serialized\n            // string into a JS object. If result isn't truthy, the\n            // key is likely undefined and we'll pass it straight\n            // to the iterator.\n            if (value) {\n                value = dbInfo.serializer.deserialize(value);\n            }\n\n            value = iterator(value, key.substring(keyPrefixLength), iterationNumber++);\n\n            if (value !== void 0) {\n                return value;\n            }\n        }\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\n// Same as localStorage's key() method, except takes a callback.\nfunction key$2(n, callback) {\n    var self = this;\n    var promise = self.ready().then(function () {\n        var dbInfo = self._dbInfo;\n        var result;\n        try {\n            result = localStorage.key(n);\n        } catch (error) {\n            result = null;\n        }\n\n        // Remove the prefix from the key, if a key is found.\n        if (result) {\n            result = result.substring(dbInfo.keyPrefix.length);\n        }\n\n        return result;\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\nfunction keys$2(callback) {\n    var self = this;\n    var promise = self.ready().then(function () {\n        var dbInfo = self._dbInfo;\n        var length = localStorage.length;\n        var keys = [];\n\n        for (var i = 0; i < length; i++) {\n            var itemKey = localStorage.key(i);\n            if (itemKey.indexOf(dbInfo.keyPrefix) === 0) {\n                keys.push(itemKey.substring(dbInfo.keyPrefix.length));\n            }\n        }\n\n        return keys;\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\n// Supply the number of keys in the datastore to the callback function.\nfunction length$2(callback) {\n    var self = this;\n    var promise = self.keys().then(function (keys) {\n        return keys.length;\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\n// Remove an item from the store, nice and simple.\nfunction removeItem$2(key, callback) {\n    var self = this;\n\n    key = normalizeKey(key);\n\n    var promise = self.ready().then(function () {\n        var dbInfo = self._dbInfo;\n        localStorage.removeItem(dbInfo.keyPrefix + key);\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\n// Set a key's value and run an optional callback once the value is set.\n// Unlike Gaia's implementation, the callback function is passed the value,\n// in case you want to operate on that value only after you're sure it\n// saved, or something like that.\nfunction setItem$2(key, value, callback) {\n    var self = this;\n\n    key = normalizeKey(key);\n\n    var promise = self.ready().then(function () {\n        // Convert undefined values to null.\n        // https://github.com/mozilla/localForage/pull/42\n        if (value === undefined) {\n            value = null;\n        }\n\n        // Save the original value to pass to the callback.\n        var originalValue = value;\n\n        return new Promise$1(function (resolve, reject) {\n            var dbInfo = self._dbInfo;\n            dbInfo.serializer.serialize(value, function (value, error) {\n                if (error) {\n                    reject(error);\n                } else {\n                    try {\n                        localStorage.setItem(dbInfo.keyPrefix + key, value);\n                        resolve(originalValue);\n                    } catch (e) {\n                        // localStorage capacity exceeded.\n                        // TODO: Make this a specific error/event.\n                        if (e.name === 'QuotaExceededError' || e.name === 'NS_ERROR_DOM_QUOTA_REACHED') {\n                            reject(e);\n                        }\n                        reject(e);\n                    }\n                }\n            });\n        });\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\nfunction dropInstance$2(options, callback) {\n    callback = getCallback.apply(this, arguments);\n\n    options = typeof options !== 'function' && options || {};\n    if (!options.name) {\n        var currentConfig = this.config();\n        options.name = options.name || currentConfig.name;\n        options.storeName = options.storeName || currentConfig.storeName;\n    }\n\n    var self = this;\n    var promise;\n    if (!options.name) {\n        promise = Promise$1.reject('Invalid arguments');\n    } else {\n        promise = new Promise$1(function (resolve) {\n            if (!options.storeName) {\n                resolve(options.name + '/');\n            } else {\n                resolve(_getKeyPrefix(options, self._defaultConfig));\n            }\n        }).then(function (keyPrefix) {\n            for (var i = localStorage.length - 1; i >= 0; i--) {\n                var key = localStorage.key(i);\n\n                if (key.indexOf(keyPrefix) === 0) {\n                    localStorage.removeItem(key);\n                }\n            }\n        });\n    }\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\nvar localStorageWrapper = {\n    _driver: 'localStorageWrapper',\n    _initStorage: _initStorage$2,\n    _support: isLocalStorageValid(),\n    iterate: iterate$2,\n    getItem: getItem$2,\n    setItem: setItem$2,\n    removeItem: removeItem$2,\n    clear: clear$2,\n    length: length$2,\n    key: key$2,\n    keys: keys$2,\n    dropInstance: dropInstance$2\n};\n\nvar sameValue = function sameValue(x, y) {\n    return x === y || typeof x === 'number' && typeof y === 'number' && isNaN(x) && isNaN(y);\n};\n\nvar includes = function includes(array, searchElement) {\n    var len = array.length;\n    var i = 0;\n    while (i < len) {\n        if (sameValue(array[i], searchElement)) {\n            return true;\n        }\n        i++;\n    }\n\n    return false;\n};\n\nvar isArray = Array.isArray || function (arg) {\n    return Object.prototype.toString.call(arg) === '[object Array]';\n};\n\n// Drivers are stored here when `defineDriver()` is called.\n// They are shared across all instances of localForage.\nvar DefinedDrivers = {};\n\nvar DriverSupport = {};\n\nvar DefaultDrivers = {\n    INDEXEDDB: asyncStorage,\n    WEBSQL: webSQLStorage,\n    LOCALSTORAGE: localStorageWrapper\n};\n\nvar DefaultDriverOrder = [DefaultDrivers.INDEXEDDB._driver, DefaultDrivers.WEBSQL._driver, DefaultDrivers.LOCALSTORAGE._driver];\n\nvar OptionalDriverMethods = ['dropInstance'];\n\nvar LibraryMethods = ['clear', 'getItem', 'iterate', 'key', 'keys', 'length', 'removeItem', 'setItem'].concat(OptionalDriverMethods);\n\nvar DefaultConfig = {\n    description: '',\n    driver: DefaultDriverOrder.slice(),\n    name: 'localforage',\n    // Default DB size is _JUST UNDER_ 5MB, as it's the highest size\n    // we can use without a prompt.\n    size: 4980736,\n    storeName: 'keyvaluepairs',\n    version: 1.0\n};\n\nfunction callWhenReady(localForageInstance, libraryMethod) {\n    localForageInstance[libraryMethod] = function () {\n        var _args = arguments;\n        return localForageInstance.ready().then(function () {\n            return localForageInstance[libraryMethod].apply(localForageInstance, _args);\n        });\n    };\n}\n\nfunction extend() {\n    for (var i = 1; i < arguments.length; i++) {\n        var arg = arguments[i];\n\n        if (arg) {\n            for (var _key in arg) {\n                if (arg.hasOwnProperty(_key)) {\n                    if (isArray(arg[_key])) {\n                        arguments[0][_key] = arg[_key].slice();\n                    } else {\n                        arguments[0][_key] = arg[_key];\n                    }\n                }\n            }\n        }\n    }\n\n    return arguments[0];\n}\n\nvar LocalForage = function () {\n    function LocalForage(options) {\n        _classCallCheck(this, LocalForage);\n\n        for (var driverTypeKey in DefaultDrivers) {\n            if (DefaultDrivers.hasOwnProperty(driverTypeKey)) {\n                var driver = DefaultDrivers[driverTypeKey];\n                var driverName = driver._driver;\n                this[driverTypeKey] = driverName;\n\n                if (!DefinedDrivers[driverName]) {\n                    // we don't need to wait for the promise,\n                    // since the default drivers can be defined\n                    // in a blocking manner\n                    this.defineDriver(driver);\n                }\n            }\n        }\n\n        this._defaultConfig = extend({}, DefaultConfig);\n        this._config = extend({}, this._defaultConfig, options);\n        this._driverSet = null;\n        this._initDriver = null;\n        this._ready = false;\n        this._dbInfo = null;\n\n        this._wrapLibraryMethodsWithReady();\n        this.setDriver(this._config.driver)[\"catch\"](function () {});\n    }\n\n    // Set any config values for localForage; can be called anytime before\n    // the first API call (e.g. `getItem`, `setItem`).\n    // We loop through options so we don't overwrite existing config\n    // values.\n\n\n    LocalForage.prototype.config = function config(options) {\n        // If the options argument is an object, we use it to set values.\n        // Otherwise, we return either a specified config value or all\n        // config values.\n        if ((typeof options === 'undefined' ? 'undefined' : _typeof(options)) === 'object') {\n            // If localforage is ready and fully initialized, we can't set\n            // any new configuration values. Instead, we return an error.\n            if (this._ready) {\n                return new Error(\"Can't call config() after localforage \" + 'has been used.');\n            }\n\n            for (var i in options) {\n                if (i === 'storeName') {\n                    options[i] = options[i].replace(/\\W/g, '_');\n                }\n\n                if (i === 'version' && typeof options[i] !== 'number') {\n                    return new Error('Database version must be a number.');\n                }\n\n                this._config[i] = options[i];\n            }\n\n            // after all config options are set and\n            // the driver option is used, try setting it\n            if ('driver' in options && options.driver) {\n                return this.setDriver(this._config.driver);\n            }\n\n            return true;\n        } else if (typeof options === 'string') {\n            return this._config[options];\n        } else {\n            return this._config;\n        }\n    };\n\n    // Used to define a custom driver, shared across all instances of\n    // localForage.\n\n\n    LocalForage.prototype.defineDriver = function defineDriver(driverObject, callback, errorCallback) {\n        var promise = new Promise$1(function (resolve, reject) {\n            try {\n                var driverName = driverObject._driver;\n                var complianceError = new Error('Custom driver not compliant; see ' + 'https://mozilla.github.io/localForage/#definedriver');\n\n                // A driver name should be defined and not overlap with the\n                // library-defined, default drivers.\n                if (!driverObject._driver) {\n                    reject(complianceError);\n                    return;\n                }\n\n                var driverMethods = LibraryMethods.concat('_initStorage');\n                for (var i = 0, len = driverMethods.length; i < len; i++) {\n                    var driverMethodName = driverMethods[i];\n\n                    // when the property is there,\n                    // it should be a method even when optional\n                    var isRequired = !includes(OptionalDriverMethods, driverMethodName);\n                    if ((isRequired || driverObject[driverMethodName]) && typeof driverObject[driverMethodName] !== 'function') {\n                        reject(complianceError);\n                        return;\n                    }\n                }\n\n                var configureMissingMethods = function configureMissingMethods() {\n                    var methodNotImplementedFactory = function methodNotImplementedFactory(methodName) {\n                        return function () {\n                            var error = new Error('Method ' + methodName + ' is not implemented by the current driver');\n                            var promise = Promise$1.reject(error);\n                            executeCallback(promise, arguments[arguments.length - 1]);\n                            return promise;\n                        };\n                    };\n\n                    for (var _i = 0, _len = OptionalDriverMethods.length; _i < _len; _i++) {\n                        var optionalDriverMethod = OptionalDriverMethods[_i];\n                        if (!driverObject[optionalDriverMethod]) {\n                            driverObject[optionalDriverMethod] = methodNotImplementedFactory(optionalDriverMethod);\n                        }\n                    }\n                };\n\n                configureMissingMethods();\n\n                var setDriverSupport = function setDriverSupport(support) {\n                    if (DefinedDrivers[driverName]) {\n                        console.info('Redefining LocalForage driver: ' + driverName);\n                    }\n                    DefinedDrivers[driverName] = driverObject;\n                    DriverSupport[driverName] = support;\n                    // don't use a then, so that we can define\n                    // drivers that have simple _support methods\n                    // in a blocking manner\n                    resolve();\n                };\n\n                if ('_support' in driverObject) {\n                    if (driverObject._support && typeof driverObject._support === 'function') {\n                        driverObject._support().then(setDriverSupport, reject);\n                    } else {\n                        setDriverSupport(!!driverObject._support);\n                    }\n                } else {\n                    setDriverSupport(true);\n                }\n            } catch (e) {\n                reject(e);\n            }\n        });\n\n        executeTwoCallbacks(promise, callback, errorCallback);\n        return promise;\n    };\n\n    LocalForage.prototype.driver = function driver() {\n        return this._driver || null;\n    };\n\n    LocalForage.prototype.getDriver = function getDriver(driverName, callback, errorCallback) {\n        var getDriverPromise = DefinedDrivers[driverName] ? Promise$1.resolve(DefinedDrivers[driverName]) : Promise$1.reject(new Error('Driver not found.'));\n\n        executeTwoCallbacks(getDriverPromise, callback, errorCallback);\n        return getDriverPromise;\n    };\n\n    LocalForage.prototype.getSerializer = function getSerializer(callback) {\n        var serializerPromise = Promise$1.resolve(localforageSerializer);\n        executeTwoCallbacks(serializerPromise, callback);\n        return serializerPromise;\n    };\n\n    LocalForage.prototype.ready = function ready(callback) {\n        var self = this;\n\n        var promise = self._driverSet.then(function () {\n            if (self._ready === null) {\n                self._ready = self._initDriver();\n            }\n\n            return self._ready;\n        });\n\n        executeTwoCallbacks(promise, callback, callback);\n        return promise;\n    };\n\n    LocalForage.prototype.setDriver = function setDriver(drivers, callback, errorCallback) {\n        var self = this;\n\n        if (!isArray(drivers)) {\n            drivers = [drivers];\n        }\n\n        var supportedDrivers = this._getSupportedDrivers(drivers);\n\n        function setDriverToConfig() {\n            self._config.driver = self.driver();\n        }\n\n        function extendSelfWithDriver(driver) {\n            self._extend(driver);\n            setDriverToConfig();\n\n            self._ready = self._initStorage(self._config);\n            return self._ready;\n        }\n\n        function initDriver(supportedDrivers) {\n            return function () {\n                var currentDriverIndex = 0;\n\n                function driverPromiseLoop() {\n                    while (currentDriverIndex < supportedDrivers.length) {\n                        var driverName = supportedDrivers[currentDriverIndex];\n                        currentDriverIndex++;\n\n                        self._dbInfo = null;\n                        self._ready = null;\n\n                        return self.getDriver(driverName).then(extendSelfWithDriver)[\"catch\"](driverPromiseLoop);\n                    }\n\n                    setDriverToConfig();\n                    var error = new Error('No available storage method found.');\n                    self._driverSet = Promise$1.reject(error);\n                    return self._driverSet;\n                }\n\n                return driverPromiseLoop();\n            };\n        }\n\n        // There might be a driver initialization in progress\n        // so wait for it to finish in order to avoid a possible\n        // race condition to set _dbInfo\n        var oldDriverSetDone = this._driverSet !== null ? this._driverSet[\"catch\"](function () {\n            return Promise$1.resolve();\n        }) : Promise$1.resolve();\n\n        this._driverSet = oldDriverSetDone.then(function () {\n            var driverName = supportedDrivers[0];\n            self._dbInfo = null;\n            self._ready = null;\n\n            return self.getDriver(driverName).then(function (driver) {\n                self._driver = driver._driver;\n                setDriverToConfig();\n                self._wrapLibraryMethodsWithReady();\n                self._initDriver = initDriver(supportedDrivers);\n            });\n        })[\"catch\"](function () {\n            setDriverToConfig();\n            var error = new Error('No available storage method found.');\n            self._driverSet = Promise$1.reject(error);\n            return self._driverSet;\n        });\n\n        executeTwoCallbacks(this._driverSet, callback, errorCallback);\n        return this._driverSet;\n    };\n\n    LocalForage.prototype.supports = function supports(driverName) {\n        return !!DriverSupport[driverName];\n    };\n\n    LocalForage.prototype._extend = function _extend(libraryMethodsAndProperties) {\n        extend(this, libraryMethodsAndProperties);\n    };\n\n    LocalForage.prototype._getSupportedDrivers = function _getSupportedDrivers(drivers) {\n        var supportedDrivers = [];\n        for (var i = 0, len = drivers.length; i < len; i++) {\n            var driverName = drivers[i];\n            if (this.supports(driverName)) {\n                supportedDrivers.push(driverName);\n            }\n        }\n        return supportedDrivers;\n    };\n\n    LocalForage.prototype._wrapLibraryMethodsWithReady = function _wrapLibraryMethodsWithReady() {\n        // Add a stub for each driver API method that delays the call to the\n        // corresponding driver method until localForage is ready. These stubs\n        // will be replaced by the driver methods as soon as the driver is\n        // loaded, so there is no performance impact.\n        for (var i = 0, len = LibraryMethods.length; i < len; i++) {\n            callWhenReady(this, LibraryMethods[i]);\n        }\n    };\n\n    LocalForage.prototype.createInstance = function createInstance(options) {\n        return new LocalForage(options);\n    };\n\n    return LocalForage;\n}();\n\n// The actual localForage object that we expose as a module or via a\n// global. It's extended by pulling in one of our other libraries.\n\n\nvar localforage_js = new LocalForage();\n\nmodule.exports = localforage_js;\n\n},{\"3\":3}]},{},[4])(4)\n});\n"],"sourceRoot":""}